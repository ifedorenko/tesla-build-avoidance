Index: pom.xml
===================================================================
--- pom.xml	(revision 1149567)
+++ pom.xml	(working copy)
@@ -101,17 +101,10 @@
       <version>1.12</version>
     </dependency>
     <dependency>
-      <groupId>org.sonatype.plexus</groupId>
-      <artifactId>plexus-build-api</artifactId>
-      <version>0.0.4</version>
+      <groupId>org.sonatype.tesla</groupId>
+      <artifactId>tesla-build-avoidance</artifactId>
+      <version>1.0-SNAPSHOT</version>
     </dependency>
-    <dependency>
-      <groupId>org.sonatype.plexus</groupId>
-      <artifactId>plexus-build-api</artifactId>
-      <version>0.0.4</version>
-      <scope>test</scope>
-      <classifier>tests</classifier>
-    </dependency>
   </dependencies>
 
   <build>
Index: src/main/java/org/apache/maven/shared/filtering/DefaultMavenFileFilter.java
===================================================================
--- src/main/java/org/apache/maven/shared/filtering/DefaultMavenFileFilter.java	(revision 1149567)
+++ src/main/java/org/apache/maven/shared/filtering/DefaultMavenFileFilter.java	(working copy)
@@ -44,7 +44,7 @@
 import org.codehaus.plexus.logging.AbstractLogEnabled;
 import org.codehaus.plexus.util.FileUtils;
 import org.codehaus.plexus.util.StringUtils;
-import org.sonatype.plexus.build.incremental.BuildContext;
+import org.eclipse.tesla.incremental.BuildContextManager;
 
 /**
  * @author <a href="mailto:olamy@apache.org">olamy</a>
@@ -59,7 +59,7 @@
 {
 
     /** @plexus.requirement */
-    private BuildContext buildContext;
+    private BuildContextManager buildContextManager;
 
     public void copyFile( File from, File to, boolean filtering, MavenProject mavenProject, List filters,
                           boolean escapedBackslashesInFilePath, String encoding, MavenSession mavenSession )
@@ -104,6 +104,8 @@
     {
         try
         {
+            buildContextManager.addOutput( from, to );
+
             if ( filtering )
             {
                 if ( getLogger().isDebugEnabled() )
@@ -122,8 +124,6 @@
                 }
                 FileUtils.copyFile( from, to, encoding, new FileUtils.FilterWrapper[0], overwrite );
             }
-
-            buildContext.refresh( to );
         }
         catch ( IOException e )
         {
Index: src/main/java/org/apache/maven/shared/filtering/DefaultMavenResourcesFiltering.java
===================================================================
--- src/main/java/org/apache/maven/shared/filtering/DefaultMavenResourcesFiltering.java	(revision 1149567)
+++ src/main/java/org/apache/maven/shared/filtering/DefaultMavenResourcesFiltering.java	(working copy)
@@ -20,9 +20,8 @@
  */
 
 import java.io.File;
-import java.io.IOException;
 import java.util.ArrayList;
-import java.util.Arrays;
+import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 
@@ -33,11 +32,12 @@
 import org.codehaus.plexus.personality.plexus.lifecycle.phase.Initializable;
 import org.codehaus.plexus.personality.plexus.lifecycle.phase.InitializationException;
 import org.codehaus.plexus.util.FileUtils;
-import org.codehaus.plexus.util.PathTool;
 import org.codehaus.plexus.util.ReaderFactory;
-import org.codehaus.plexus.util.Scanner;
 import org.codehaus.plexus.util.StringUtils;
-import org.sonatype.plexus.build.incremental.BuildContext;
+import org.eclipse.tesla.incremental.BuildContext;
+import org.eclipse.tesla.incremental.BuildContextManager;
+import org.eclipse.tesla.incremental.Digester;
+import org.eclipse.tesla.incremental.PathSet;
 
 /**
  * @author <a href="mailto:olamy@apache.org">olamy</a>
@@ -50,15 +50,11 @@
     extends AbstractLogEnabled
     implements MavenResourcesFiltering, Initializable
 {
-
-    private static final String[] EMPTY_STRING_ARRAY = {};
-
-    private static final String[] DEFAULT_INCLUDES = {"**/**"};
     
     private List defaultNonFilteredFileExtensions;
 
     /** @plexus.requirement */
-    private BuildContext buildContext;
+    private BuildContextManager buildContextFactory;
 
     // ------------------------------------------------
     //  Plexus lifecycle
@@ -175,123 +171,123 @@
                               "Using '" + mavenResourcesExecution.getEncoding()
                                   + "' encoding to copy filtered resources." );
         }
-        
-        for ( Iterator i = mavenResourcesExecution.getResources().iterator(); i.hasNext(); )
+
+        BuildContext buildContext =
+            buildContextFactory.newContext( mavenResourcesExecution.getOutputDirectory(),
+                                            getContextDirectory( mavenResourcesExecution ), "maven-filtering" );
+
+        try
         {
-            Resource resource = (Resource) i.next();
-            
-            if ( getLogger().isDebugEnabled() )
+            for ( Iterator i = mavenResourcesExecution.getResources().iterator(); i.hasNext(); )
             {
-                String ls = System.getProperty( "line.separator" );
-                StringBuffer debugMessage = new StringBuffer( "resource with targetPath " + resource.getTargetPath() )
-                    .append( ls );
-                debugMessage.append( "directory " + resource.getDirectory() ).append( ls );
-                debugMessage.append(
-                                     "excludes "
-                                         + ( resource.getExcludes() == null ? " empty " : resource.getExcludes()
-                                             .toString() ) ).append( ls );
-                debugMessage.append( "includes "
-                    + ( resource.getIncludes() == null ? " empty " : resource.getIncludes().toString() ) );
-                getLogger().debug( debugMessage.toString() );
-            }
+                Resource resource = (Resource) i.next();
 
-            String targetPath = resource.getTargetPath();
+                if ( getLogger().isDebugEnabled() )
+                {
+                    String ls = System.getProperty( "line.separator" );
+                    StringBuffer debugMessage =
+                        new StringBuffer( "resource with targetPath " + resource.getTargetPath() ).append( ls );
+                    debugMessage.append( "directory " + resource.getDirectory() ).append( ls );
+                    debugMessage.append( "excludes "
+                                             + ( resource.getExcludes() == null ? " empty "
+                                                             : resource.getExcludes().toString() ) ).append( ls );
+                    debugMessage.append( "includes "
+                        + ( resource.getIncludes() == null ? " empty " : resource.getIncludes().toString() ) );
+                    getLogger().debug( debugMessage.toString() );
+                }
 
-            File resourceDirectory = new File( resource.getDirectory() );
+                String targetPath = resource.getTargetPath();
 
-            if ( !resourceDirectory.isAbsolute() )
-            {
-                resourceDirectory = new File( mavenResourcesExecution.getResourcesBaseDirectory(), resourceDirectory
-                    .getPath() );
-            }
+                File resourceDirectory = new File( resource.getDirectory() );
 
-            if ( !resourceDirectory.exists() )
-            {
-                getLogger().info( "skip non existing resourceDirectory " + resourceDirectory.getPath() );
-                continue;
-            }
+                if ( !resourceDirectory.isAbsolute() )
+                {
+                    resourceDirectory =
+                        new File( mavenResourcesExecution.getResourcesBaseDirectory(), resourceDirectory.getPath() );
+                }
 
-            // this part is required in case the user specified "../something" as destination
-            // see MNG-1345
-            File outputDirectory = mavenResourcesExecution.getOutputDirectory();
-            boolean outputExists = outputDirectory.exists();
-            if ( !outputExists && !outputDirectory.mkdirs() )
-            {
-                throw new MavenFilteringException( "Cannot create resource output directory: " + outputDirectory );
-            }
-            
-            boolean ignoreDelta =
-                !outputExists || buildContext.hasDelta( mavenResourcesExecution.getFileFilters() )
-                    || buildContext.hasDelta( getRelativeOutputDirectory( mavenResourcesExecution ) );
-            getLogger().debug( "ignoreDelta " + ignoreDelta );
-            Scanner scanner = buildContext.newScanner( resourceDirectory, ignoreDelta );
+                if ( !resourceDirectory.exists() )
+                {
+                    getLogger().info( "skip non existing resourceDirectory " + resourceDirectory.getPath() );
+                    continue;
+                }
 
-            setupScanner( resource, scanner );
+                // this part is required in case the user specified "../something" as destination
+                // see MNG-1345
+                File outputDirectory = mavenResourcesExecution.getOutputDirectory();
+                boolean outputExists = outputDirectory.exists();
+                if ( !outputExists && !outputDirectory.mkdirs() )
+                {
+                    throw new MavenFilteringException( "Cannot create resource output directory: " + outputDirectory );
+                }
 
-            scanner.scan();
-
-            if ( mavenResourcesExecution.isIncludeEmptyDirs() )
-            {
-                try
+                Digester digester = buildContext.newDigester();
+                digester.basedir( mavenResourcesExecution.getResourcesBaseDirectory() ).files( mavenResourcesExecution.getFileFilters() );
+                digester.string( mavenResourcesExecution.getEncoding() ).value( mavenResourcesExecution.isIncludeEmptyDirs() );
+                digester.strings( mavenResourcesExecution.getNonFilteredFileExtensions() ).strings( mavenResourcesExecution.getDelimiters() );
+                digester.hashes( mavenResourcesExecution.getAdditionalProperties() );
+                digester.value( mavenResourcesExecution.isEscapedBackslashesInFilePath() ).value( mavenResourcesExecution.isEscapeWindowsPaths() );
+                if ( mavenResourcesExecution.getMavenProject() != null )
                 {
-                    File targetDirectory = targetPath == null ? outputDirectory
-                                                             : new File( outputDirectory, targetPath );
-                    copyDirectoryLayout( resourceDirectory, targetDirectory, scanner );
+                    digester.hash( mavenResourcesExecution.getMavenProject().getProperties() );
+                    if ( mavenResourcesExecution.isInjectProjectBuildFilters() )
+                    {
+                        digester.files( mavenResourcesExecution.getMavenProject().getFilters() );
+                    }
                 }
-                catch ( IOException e )
+                digester.string( resource.getTargetPath() ).value( resource.isFiltering() );
+                byte[] digest = digester.finish();
+
+                PathSet pathSet = new PathSet( resourceDirectory, resource.getIncludes(), resource.getExcludes() );
+                if ( mavenResourcesExecution.isIncludeEmptyDirs() )
                 {
-                    throw new MavenFilteringException( "Cannot copy directory structure from "
-                        + resourceDirectory.getPath() + " to " + outputDirectory.getPath() );
+                    pathSet.setKind( PathSet.Kind.FILES_AND_DIRECTORIES );
                 }
-            }
 
-            List includedFiles = Arrays.asList( scanner.getIncludedFiles() );
+                boolean ignoreDelta = buildContext.setConfiguration( pathSet, digest );
+                getLogger().debug( "ignoreDelta " + ignoreDelta );
 
-            getLogger().info(
-                              "Copying " + includedFiles.size() + " resource" + ( includedFiles.size() > 1 ? "s" : "" )
-                                  + ( targetPath == null ? "" : " to " + targetPath ) );
+                Collection includedFiles = buildContext.getInputs( pathSet, ignoreDelta );
 
-            for ( Iterator j = includedFiles.iterator(); j.hasNext(); )
-            {
-                String name = (String) j.next();
+                int fileCount = 0;
+                for ( Iterator j = includedFiles.iterator(); j.hasNext(); )
+                {
+                    String name = (String) j.next();
 
-                File source = new File( resourceDirectory, name );
+                    File source = new File( resourceDirectory, name );
 
-                //File destinationFile = new File( outputDirectory, destination );
+                    File destinationFile = getDestinationFile( outputDirectory, targetPath, name );
 
-                File destinationFile = getDestinationFile( outputDirectory, targetPath, name );
-                
-                boolean filteredExt = filteredFileExtension( source.getName(), mavenResourcesExecution
-                    .getNonFilteredFileExtensions() );
-                
-                mavenFileFilter.copyFile( source, destinationFile, resource.isFiltering() && filteredExt,
-                                          mavenResourcesExecution.getFilterWrappers(), mavenResourcesExecution
-                                              .getEncoding(), mavenResourcesExecution.isOverwrite() );
-            }
+                    if ( source.isDirectory() )
+                    {
+                        buildContext.addOutput( source, destinationFile );
 
-            // deal with deleted source files
+                        destinationFile.mkdirs();
+                    }
+                    else
+                    {
+                        fileCount++;
 
-            scanner = buildContext.newDeleteScanner( resourceDirectory );
-            
-            setupScanner( resource, scanner );
-            
-            scanner.scan();
+                        boolean filteredExt =
+                            filteredFileExtension( source.getName(),
+                                                   mavenResourcesExecution.getNonFilteredFileExtensions() );
 
-            List deletedFiles = Arrays.asList( scanner.getIncludedFiles() );
+                        mavenFileFilter.copyFile( source, destinationFile, resource.isFiltering() && filteredExt,
+                                                  mavenResourcesExecution.getFilterWrappers(),
+                                                  mavenResourcesExecution.getEncoding(),
+                                                  mavenResourcesExecution.isOverwrite() );
+                    }
+                }
 
-            for ( Iterator j = deletedFiles.iterator(); j.hasNext(); )
-            {
-                String name = (String) j.next();
+                getLogger().info( "Copied " + fileCount + " resource" + ( fileCount != 1 ? "s" : "" )
+                                      + ( targetPath == null ? "" : " to " + targetPath ) );
 
-                File destinationFile = getDestinationFile( outputDirectory, targetPath, name );
-                
-                destinationFile.delete();
-                
-                buildContext.refresh( destinationFile );
             }
-
         }
-
+        finally
+        {
+            buildContext.finish();
+        }
     }
 
     private File getDestinationFile( File outputDirectory, String targetPath, String name )
@@ -316,90 +312,13 @@
       return destinationFile;
     }
 
-    private String[] setupScanner( Resource resource, Scanner scanner )
+    private File getContextDirectory( MavenResourcesExecution execution )
     {
-      String[] includes = null;
-      if ( resource.getIncludes() != null && !resource.getIncludes().isEmpty() )
-      {
-          includes = (String[]) resource.getIncludes().toArray( EMPTY_STRING_ARRAY ) ;
-      }
-      else
-      {
-          includes = DEFAULT_INCLUDES;
-      }
-      scanner.setIncludes( includes );
-      
-      String[] excludes = null;
-      if ( resource.getExcludes() != null && !resource.getExcludes().isEmpty() )
-      {
-          excludes = (String[]) resource.getExcludes().toArray( EMPTY_STRING_ARRAY );
-          scanner.setExcludes( excludes );
-      }
-
-      scanner.addDefaultExcludes();
-      return includes;
-    }
-    
-    private void copyDirectoryLayout( File sourceDirectory, File destinationDirectory, Scanner scanner )
-        throws IOException
-    {
-        if ( sourceDirectory == null )
+        if ( execution.getMavenProject() != null )
         {
-            throw new IOException( "source directory can't be null." );
+            return new File( execution.getMavenProject().getBuild().getDirectory(), "incremental" );
         }
-
-        if ( destinationDirectory == null )
-        {
-            throw new IOException( "destination directory can't be null." );
-        }
-
-        if ( sourceDirectory.equals( destinationDirectory ) )
-        {
-            throw new IOException( "source and destination are the same directory." );
-        }
-
-        if ( !sourceDirectory.exists() )
-        {
-            throw new IOException( "Source directory doesn't exists (" + sourceDirectory.getAbsolutePath() + ")." );
-        }
-
-        List includedDirectories = Arrays.asList( scanner.getIncludedDirectories() );
-
-        for ( Iterator i = includedDirectories.iterator(); i.hasNext(); )
-        {
-            String name = (String) i.next();
-
-            File source = new File( sourceDirectory, name );
-
-            if ( source.equals( sourceDirectory ) )
-            {
-                continue;
-            }
-
-            File destination = new File( destinationDirectory, name );
-            destination.mkdirs();
-        }
+        return new File( execution.getOutputDirectory().getAbsoluteFile().getParentFile(), "incremental" );
     }
 
-    private String getRelativeOutputDirectory( MavenResourcesExecution execution )
-    {
-        String relOutDir = execution.getOutputDirectory().getAbsolutePath();
-
-        if ( execution.getMavenProject() != null && execution.getMavenProject().getBasedir() != null )
-        {
-            String basedir = execution.getMavenProject().getBasedir().getAbsolutePath();
-            relOutDir = PathTool.getRelativeFilePath( basedir, relOutDir );
-            if ( relOutDir == null )
-            {
-                relOutDir = execution.getOutputDirectory().getPath();
-            }
-            else
-            {
-                relOutDir = relOutDir.replace( '\\', '/' );
-            }
-        }
-
-        return relOutDir;
-    }
-
 }
